{"id":"src/script.js","dependencies":[{"name":"C:\\Learning\\3.8-RxJS-Beyond-the-Basics--Operators-in-Depth\\package.json","includedInParent":true,"mtime":1629914526178},{"name":"rxjs","loc":{"line":1,"column":76},"parent":"C:\\Learning\\3.8-RxJS-Beyond-the-Basics--Operators-in-Depth\\src\\script.js","resolved":"C:\\Learning\\3.8-RxJS-Beyond-the-Basics--Operators-in-Depth\\node_modules\\rxjs\\_esm5\\index.js"},{"name":"rxjs/operators","loc":{"line":2,"column":100},"parent":"C:\\Learning\\3.8-RxJS-Beyond-the-Basics--Operators-in-Depth\\src\\script.js","resolved":"C:\\Learning\\3.8-RxJS-Beyond-the-Basics--Operators-in-Depth\\node_modules\\rxjs\\_esm5\\operators\\index.js"}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"src/script.js","original":{"line":1,"column":0}},{"generated":{"line":5,"column":0},"source":"src/script.js","original":{"line":2,"column":0}}],"sources":{"src/script.js":"import { interval, Observable, of , concat, merge, combineLatest, zip} from \"rxjs\";\r\nimport { filter, first, last, map, skip, startWith, take, takeLast, tap, withLatestFrom, scan} from \"rxjs/operators\";\r\n\r\n//  const foo = interval(500).pipe(take(4));\r\n//  const more = interval(300).pipe(take(5));\r\n// let foo = of(1,2,3,4,5,6,7,8,9);\r\n//#region Use calculate like an own observable\r\n// let multiply = (x, n) => x* n;\r\n// let divide = (x, n) => x/n;\r\n// let add = (x, n) => x+n;\r\n// let substract = (x, n) => x-n;\r\n\r\n// function calculate(transformationFn, n) {\r\n//     const result = function (source) {\r\n//       return new Observable((observer) => {\r\n//         return source.subscribe({\r\n//           next: (x) => observer.next(transformationFn(x, n)),\r\n//           error: (err)=> observer.error(err),\r\n//           complete: ()=>observer.complete()\r\n//         });\r\n//       });\r\n//     }; \r\n//     return result;\r\n//   }\r\n\r\n// let bar1 = foo.pipe(\r\n//     calculate(multiply, 10), \r\n//     take(5)\r\n//     ).subscribe(\r\n//          x => console.log(`Next bar1: ${x}`),\r\n//          (err)=> console.log(`Error ${err}`),\r\n//          ()=> console.log(\"Bar1 Complete\")\r\n//     );\r\n//#endregion\r\n\r\n//#region use map to do something\r\n// let bar = foo.pipe(map(x => (x+1)*10), take(5));\r\n// bar.subscribe(\r\n//   (x) => console.log('next ' + x),\r\n//   (err) => console.log('error ' + err),\r\n//   () => console.log('done')\r\n// );\r\n//#endregion\r\n\r\n//#region using concat to excecute the two observables in order \r\n// let bar1 = foo.pipe(\r\n//     calculate(multiply, 10), \r\n//     take(5)\r\n//     );\r\n\r\n// let bar = foo.pipe(map(x => (x+1)*10), take(5));\r\n\r\n// concat(bar1, bar).subscribe(console.log)\r\n\r\n//#endregion\r\n\r\n//#region Using do for debuggion purposes (idk why thy dont use tap)\r\n// let bar = foo.pipe(\r\n//     tap((x) => console.log(\"before \" + x)),\r\n//     map((x) => x * 10),\r\n//     tap((x) => console.log(\"after \" + x))\r\n//   )\r\n//let barSamaAsDo = foo.map(function(x){return x})\r\n//#endregion\r\n\r\n//#region some important operators\r\n\r\n// const bar = foo.pipe(\r\n// //filter(x => x>2), //filtra los datos dada una condicion\r\n// //take(5), //toma los primeros 5 valores y despues los ignora\r\n// //first(), //toma solo el primer valor\r\n// //skip(1), //igonora los primeros n valores que le pongas en el argumento\r\n// //takeLast(3), //muy parecido a take, solo que en vez de tomar los primeros valores, toma los ultimos\r\n// //last(), //lo mismo que first pero al reves \r\n// );\r\n//  const bar = concat(foo, more) // ejecuta primero foo y despues more\r\n\r\n//const bar= merge(foo, more)\r\n\r\n//#region combineLatest\r\n/*\r\n----0----1----2----(3|)     (weight)\r\n--0--1--2--3--(4|)          (height)\r\n   combineLatest((x, y) => x+y)\r\n----01--23-4--(56)-(7|)\r\n*/\r\n\r\n// This is deprecated. To combine observables, use combineLatest(observable, observable)\r\n// let combined = foo.pipe(combineLatest(more, (x, y) => x + y));\r\n//const bar = combineLatest(foo, more, (x,y) => x+y);\r\n//#endregion\r\n\r\n\r\n //#endregion\r\n\r\n//#region  withLatestForm\r\n//en este ejemplo toma el ultimo valor, con la condicion del seguondo observable\r\n// const foo = zip(interval(500), of(\"H\", \"e\", \"l\", \"l\", \"o\"), (_, c) => c).pipe(\r\n//     take(5)\r\n//   );\r\n  \r\n//   const bar = zip(interval(300), of(0, 1, 0, 1, 0, 1, 0), (_, n) => n).pipe(\r\n//     take(7)\r\n//   );\r\n  \r\n//   /*\r\n//   ----H----e----l----l----o|     (foo)\r\n//   --0--1--0--1--0--1--0|         (bar)\r\n//     withLatestFrom((c,n) => n === 1 ? c.toUpperCase() : c.toLowerCase())\r\n//   ----h----e----l----L----o|\r\n//   */\r\n  \r\n//   const result = foo.pipe(\r\n//     withLatestFrom(bar, (c, n) => {\r\n//       return n === 1 ? c.toUpperCase() : c.toLowerCase();\r\n//     })\r\n//   );\r\n  \r\n//   result.subscribe(\r\n//     function (x) {\r\n//       console.log(\"next \" + x);\r\n//     },\r\n//     function (err) {\r\n//       console.log(\"error \" + err);\r\n//     },\r\n//     function () {\r\n//       console.log(\"done\");\r\n//     }\r\n//   );\r\n//#endregion\r\n\r\n//#region Zip operator\r\n// /*\r\n// ---0---1---2---3---4|     (foo)\r\n// ---0---1---2---3|     (more)\r\n//   zip((x,y) => x)\r\n// ---0---2---4---6|\r\n// */\r\n\r\n// // First of foo + First of bar => First of output\r\n// // Second of foo + Second of bar => Second of output\r\n// // ...\r\n// // n-th of foo + n-th of bar => n-th of output\r\n// const bar = zip(foo, more, (x, y)=>x+y)\r\n\r\n// bar\r\n// //.pipe(startWith(5))\r\n// .subscribe(\r\n//   (x) => console.log('next ' + x),\r\n//   (err) => console.log('error ' + err),\r\n//   () => console.log('done')\r\n// );\r\n//#endregion\r\n\r\n//#region scan operator\r\n\r\n// let foo = of('h', 'e', 'l', 'l', 'o');\r\n// let bar = interval(600).pipe(\r\n//   take(5)\r\n// )\r\n\r\n// /*\r\n// (hello|)                          (foo)\r\n// -----0-----1-----2-----3-----4|   (bar)\r\n//        zip((x,y) => x)\r\n// -----h-----e-----l-----l-----o|\r\n//   scan((acc, x) => acc+x, '')\r\n// -----h-----(he)--(hel)-(hell)(hello|)\r\n// */\r\n\r\n// let combined = zip(foo, bar, (x,y) => x).pipe(scan((acc, x) => acc+x, ''));\r\n\r\n// combined.subscribe(\r\n//   (x) => console.log('next ' + x),\r\n//   (err) => console.log('error ' + err),\r\n//   () => console.log('done')\r\n// );\r\n\r\n//#endregion\r\n\r\n//#region Group Consecutive Values Together with RxJS Operator buffer\r\n\r\n// let foo = zip(interval(600), of('h', 'e', 'l', 'l', 'o')).pipe(\r\n//     map(([x, y]) => y),\r\n//     take(5)\r\n//   );\r\n  \r\n//   let bar = interval(900).pipe(\r\n//     take(3)\r\n//   )\r\n//   /*\r\n//   -----h-----e-----l-----l-----o|       (foo)\r\n//   --------0--------1--------2|          (bar)\r\n  \r\n//           buffer(bar)\r\n  \r\n//   --------h--------e--------ll|\r\n//   */\r\n  \r\n//   let result = foo.pipe(buffer(bar));\r\n  \r\n//   result.subscribe(\r\n//     (x) => console.log('next ' + x),\r\n//     (err) => console.log('error ' + err),\r\n//     () => console.log('done')\r\n//   );\r\n\r\n//#endregion\r\n\r\n//#region Delay the Emission of Values from an RxJS Observable\r\n\r\n// let foo = interval(100).pipe(\r\n    //   take(5)\r\n    // )\r\n    \r\n    // /*\r\n    // --0--1--2--3--4|\r\n    //  delayWhen(x => -----0|)\r\n    // --------0--1--2--3--4|\r\n    // */\r\n    \r\n    // // delay(1000)\r\n    \r\n    // //uncomment below to see delay operator output\r\n    // // let result = foo.pipe(delay(2000))\r\n    \r\n    // let result = foo.pipe(delayWhen( x =>\r\n    //   interval(x * x * 100).pipe(take(1))\r\n    // ));\r\n    \r\n    // result.subscribe(\r\n    //   (x) => console.log('next ' + x),\r\n    //   (err) => console.log('error ' + err),\r\n    //   () => console.log('done')\r\n    // );\r\n//#endregion\r\n\r\n//#region Drop and Delay Observable Emissions with RxJS debounce\r\n\r\n// let foo = interval(100).pipe(\r\n//     take(5)\r\n//   );\r\n  \r\n//   /*\r\n//   --0--1--2--3--4|\r\n//     debounceTime(1000) // delay\r\n//     debounce           // delayWhen\r\n//   ----0--1--2--3--4|\r\n//   */\r\n  \r\n//   // uncomment the 3 lines below to see debounce code\r\n//   // let result = foo.pipe(debounce(() =>\r\n//   //   interval(1000)\r\n//   // ));\r\n  \r\n//   let result = foo.pipe(debounceTime(5000));\r\n  \r\n//   result.subscribe(\r\n//     (x) => console.log('next ' + x),\r\n//     (err) => console.log('error ' + err),\r\n//     () => console.log('done')\r\n//   );\r\n//#endregion\r\n\r\n//#region Limit the Rate of Emissions from Observables with throttle in RxJS\r\n// setting the interval to 1000, makes the output the same as the instructors. \r\n// let foo = interval(1000).pipe(\r\n//     take(5)\r\n//   )\r\n  \r\n//   /*\r\n//   --0--1--2--3--4|\r\n//     debounceTime(1000) // waits for silence, then emits\r\n//     throttleTime(1000) // first emits, then causes silence\r\n//   --0-----2-----4|\r\n//   */\r\n  \r\n//   let result = foo.pipe(throttleTime(1000));\r\n  \r\n//   result.subscribe(\r\n//     (x) => console.log('next ' + x),\r\n//     (err) => console.log('error ' + err),\r\n//     () => console.log('done')\r\n//   );\r\n\r\n//#endregion\r\n\r\n//#region Filter Redundant Observable Emissions with RxJS distinct\r\n\r\n// let foo = zip(interval(500), of('a', 'b', 'a', 'a', 'b')).pipe(\r\n//   map(([x,y])=> y),\r\n//   take(5)\r\n// )\r\n\r\n// /*\r\n// --a--b--a--a--b|\r\n//    distinctUntilChanged\r\n// --a--b--a-----b|\r\n// */\r\n\r\n// let result = foo.pipe(distinctUntilChanged());\r\n\r\n// result.subscribe(\r\n//   (x) => console.log('next ' + x),\r\n//   (err) => console.log('error ' + err),\r\n//   () => console.log('done')\r\n// );\r\n\r\n//#endregion\r\n\r\n\r\n//#region Handle Errors with RxJS catch\r\n\r\n// let foo = interval(500).pipe(\r\n//     map(() => Math.random()) \r\n//   )\r\n  \r\n//   let bar = foo.pipe(\r\n//     map( x => {\r\n//       if (x < 0.5) {\r\n//         return x\r\n//       } else {\r\n//         throw new Error('Too large number')\r\n//       }\r\n//     })\r\n//   )\r\n  \r\n//   /*\r\n//   --a--b--c--d--2|     (foo)\r\n//   map(toUpperCase)\r\n//   --A--B--C--D--#      (bar)\r\n//   catch(# => -Z|)\r\n//   --A--B--C--D--Z|\r\n//   */\r\n  \r\n//   let result = bar.pipe(\r\n//     catchError((e, outputObs) => outputObs)\r\n//   );\r\n  \r\n//   result.subscribe(\r\n//     (x) => console.log('next ' + x),\r\n//     (err) => console.log('error ' + err),\r\n//     () => console.log('done')\r\n//   );\r\n\r\n//#endregion\r\n\r\n\r\n//#region Resubscribe to an Observable on Error with RxJS retry\r\n\r\n// // uncomment below to see retry operator\r\n// // import { retry } from 'rxjs/operators';\r\n\r\n// let foo = zip(interval(500), of('a', 'b', 'c', 'd', 2)).pipe(\r\n//     map(([x,y])=> y)\r\n//   )\r\n  \r\n//   let bar = foo.pipe(map(x => x.toUpperCase()));\r\n  \r\n//   /*\r\n//   --a--b--c--d--2|     (foo)\r\n//   map(toUpperCase)\r\n//   --A--B--C--D--#      (bar)\r\n//    retryWhen\r\n//   --A--B--C--D-----------A--B--C--D-------------A--B--C--D---\r\n//   */\r\n  \r\n//   // uncomment below to see retry operator\r\n//   // let result = bar.pipe(retry(2));\r\n  \r\n//   let result = bar.pipe(retryWhen(errorObs => errorObs.pipe(delay(3000))));\r\n  \r\n//   result.subscribe(\r\n//     (x) => console.log('next ' + x),\r\n//     (err) => console.log('error ' + err),\r\n//     () => console.log('done')\r\n//   );\r\n\r\n//#endregion\r\n\r\n\r\n//#region Repeat the Execution of an Observable with RxJS repeat\r\n\r\n\r\n// // of is an example of a Creation Operator\r\n// let foo = of(\"a\", \"b\", \"c\", \"d\");\r\n\r\n// // Example of first Operator, Pipeable Operator\r\n// let firstLetter = foo.pipe(first());\r\n\r\n// firstLetter.subscribe((x) => console.log(\"First Operator Example \" + x));\r\n\r\n// // Example of map and repeat Operators, Pipeable Operators\r\n// let mapExample = foo.pipe(map((x) => x.toUpperCase()));\r\n\r\n// let result = mapExample.pipe(repeat(1));\r\n\r\n// result.subscribe((x) => console.log(\"next \" + x));\r\n\r\n//#endregion\r\n"},"lineCount":null}},"error":null,"hash":"5f74eaef313368848a22458e548838ac","cacheData":{"env":{}}}